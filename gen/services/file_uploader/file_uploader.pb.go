// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.6.1
// source: services/file_uploader/file_uploader.proto

package file_uploader

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type FileType int32

const (
	FileType_UNDEFINED FileType = 0
	FileType_JPEG      FileType = 1
)

// Enum value maps for FileType.
var (
	FileType_name = map[int32]string{
		0: "UNDEFINED",
		1: "JPEG",
	}
	FileType_value = map[string]int32{
		"UNDEFINED": 0,
		"JPEG":      1,
	}
)

func (x FileType) Enum() *FileType {
	p := new(FileType)
	*p = x
	return p
}

func (x FileType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FileType) Descriptor() protoreflect.EnumDescriptor {
	return file_services_file_uploader_file_uploader_proto_enumTypes[0].Descriptor()
}

func (FileType) Type() protoreflect.EnumType {
	return &file_services_file_uploader_file_uploader_proto_enumTypes[0]
}

func (x FileType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FileType.Descriptor instead.
func (FileType) EnumDescriptor() ([]byte, []int) {
	return file_services_file_uploader_file_uploader_proto_rawDescGZIP(), []int{0}
}

type Chunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to OneOfChunk:
	//	*Chunk_Chunk
	//	*Chunk_Meta
	OneOfChunk isChunk_OneOfChunk `protobuf_oneof:"oneOfChunk"`
}

func (x *Chunk) Reset() {
	*x = Chunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_file_uploader_file_uploader_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chunk) ProtoMessage() {}

func (x *Chunk) ProtoReflect() protoreflect.Message {
	mi := &file_services_file_uploader_file_uploader_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chunk.ProtoReflect.Descriptor instead.
func (*Chunk) Descriptor() ([]byte, []int) {
	return file_services_file_uploader_file_uploader_proto_rawDescGZIP(), []int{0}
}

func (m *Chunk) GetOneOfChunk() isChunk_OneOfChunk {
	if m != nil {
		return m.OneOfChunk
	}
	return nil
}

func (x *Chunk) GetChunk() []byte {
	if x, ok := x.GetOneOfChunk().(*Chunk_Chunk); ok {
		return x.Chunk
	}
	return nil
}

func (x *Chunk) GetMeta() *Metadata {
	if x, ok := x.GetOneOfChunk().(*Chunk_Meta); ok {
		return x.Meta
	}
	return nil
}

type isChunk_OneOfChunk interface {
	isChunk_OneOfChunk()
}

type Chunk_Chunk struct {
	Chunk []byte `protobuf:"bytes,1,opt,name=chunk,proto3,oneof"`
}

type Chunk_Meta struct {
	Meta *Metadata `protobuf:"bytes,2,opt,name=meta,proto3,oneof"`
}

func (*Chunk_Chunk) isChunk_OneOfChunk() {}

func (*Chunk_Meta) isChunk_OneOfChunk() {}

type FileUploaderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID string `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
}

func (x *FileUploaderResponse) Reset() {
	*x = FileUploaderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_file_uploader_file_uploader_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileUploaderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileUploaderResponse) ProtoMessage() {}

func (x *FileUploaderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_file_uploader_file_uploader_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileUploaderResponse.ProtoReflect.Descriptor instead.
func (*FileUploaderResponse) Descriptor() ([]byte, []int) {
	return file_services_file_uploader_file_uploader_proto_rawDescGZIP(), []int{1}
}

func (x *FileUploaderResponse) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

type Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type FileType `protobuf:"varint,1,opt,name=type,proto3,enum=file_uploader.FileType" json:"type,omitempty"`
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_file_uploader_file_uploader_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_services_file_uploader_file_uploader_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_services_file_uploader_file_uploader_proto_rawDescGZIP(), []int{2}
}

func (x *Metadata) GetType() FileType {
	if x != nil {
		return x.Type
	}
	return FileType_UNDEFINED
}

var File_services_file_uploader_file_uploader_proto protoreflect.FileDescriptor

var file_services_file_uploader_file_uploader_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x75, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x22, 0x5c, 0x0a, 0x05, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x12, 0x16, 0x0a, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x2d, 0x0a, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x42, 0x0c, 0x0a, 0x0a, 0x6f,
	0x6e, 0x65, 0x4f, 0x66, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x22, 0x2a, 0x0a, 0x14, 0x46, 0x69, 0x6c,
	0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x55, 0x55, 0x49, 0x44, 0x22, 0x37, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x17, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x2a, 0x23,
	0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e,
	0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4a, 0x50, 0x45,
	0x47, 0x10, 0x01, 0x32, 0x57, 0x0a, 0x0c, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x06, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x14, 0x2e,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x1a, 0x23, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x42, 0x1c, 0x5a, 0x1a,
	0x67, 0x65, 0x6e, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_services_file_uploader_file_uploader_proto_rawDescOnce sync.Once
	file_services_file_uploader_file_uploader_proto_rawDescData = file_services_file_uploader_file_uploader_proto_rawDesc
)

func file_services_file_uploader_file_uploader_proto_rawDescGZIP() []byte {
	file_services_file_uploader_file_uploader_proto_rawDescOnce.Do(func() {
		file_services_file_uploader_file_uploader_proto_rawDescData = protoimpl.X.CompressGZIP(file_services_file_uploader_file_uploader_proto_rawDescData)
	})
	return file_services_file_uploader_file_uploader_proto_rawDescData
}

var file_services_file_uploader_file_uploader_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_services_file_uploader_file_uploader_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_services_file_uploader_file_uploader_proto_goTypes = []interface{}{
	(FileType)(0),                // 0: file_uploader.FileType
	(*Chunk)(nil),                // 1: file_uploader.Chunk
	(*FileUploaderResponse)(nil), // 2: file_uploader.FileUploaderResponse
	(*Metadata)(nil),             // 3: file_uploader.Metadata
}
var file_services_file_uploader_file_uploader_proto_depIdxs = []int32{
	3, // 0: file_uploader.Chunk.meta:type_name -> file_uploader.Metadata
	0, // 1: file_uploader.Metadata.type:type_name -> file_uploader.FileType
	1, // 2: file_uploader.FileUploader.Upload:input_type -> file_uploader.Chunk
	2, // 3: file_uploader.FileUploader.Upload:output_type -> file_uploader.FileUploaderResponse
	3, // [3:4] is the sub-list for method output_type
	2, // [2:3] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_services_file_uploader_file_uploader_proto_init() }
func file_services_file_uploader_file_uploader_proto_init() {
	if File_services_file_uploader_file_uploader_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_services_file_uploader_file_uploader_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_file_uploader_file_uploader_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileUploaderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_file_uploader_file_uploader_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_services_file_uploader_file_uploader_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Chunk_Chunk)(nil),
		(*Chunk_Meta)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_services_file_uploader_file_uploader_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_services_file_uploader_file_uploader_proto_goTypes,
		DependencyIndexes: file_services_file_uploader_file_uploader_proto_depIdxs,
		EnumInfos:         file_services_file_uploader_file_uploader_proto_enumTypes,
		MessageInfos:      file_services_file_uploader_file_uploader_proto_msgTypes,
	}.Build()
	File_services_file_uploader_file_uploader_proto = out.File
	file_services_file_uploader_file_uploader_proto_rawDesc = nil
	file_services_file_uploader_file_uploader_proto_goTypes = nil
	file_services_file_uploader_file_uploader_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// FileUploaderClient is the client API for FileUploader service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FileUploaderClient interface {
	Upload(ctx context.Context, opts ...grpc.CallOption) (FileUploader_UploadClient, error)
}

type fileUploaderClient struct {
	cc grpc.ClientConnInterface
}

func NewFileUploaderClient(cc grpc.ClientConnInterface) FileUploaderClient {
	return &fileUploaderClient{cc}
}

func (c *fileUploaderClient) Upload(ctx context.Context, opts ...grpc.CallOption) (FileUploader_UploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FileUploader_serviceDesc.Streams[0], "/file_uploader.FileUploader/Upload", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileUploaderUploadClient{stream}
	return x, nil
}

type FileUploader_UploadClient interface {
	Send(*Chunk) error
	CloseAndRecv() (*FileUploaderResponse, error)
	grpc.ClientStream
}

type fileUploaderUploadClient struct {
	grpc.ClientStream
}

func (x *fileUploaderUploadClient) Send(m *Chunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileUploaderUploadClient) CloseAndRecv() (*FileUploaderResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(FileUploaderResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FileUploaderServer is the server API for FileUploader service.
type FileUploaderServer interface {
	Upload(FileUploader_UploadServer) error
}

// UnimplementedFileUploaderServer can be embedded to have forward compatible implementations.
type UnimplementedFileUploaderServer struct {
}

func (*UnimplementedFileUploaderServer) Upload(FileUploader_UploadServer) error {
	return status.Errorf(codes.Unimplemented, "method Upload not implemented")
}

func RegisterFileUploaderServer(s *grpc.Server, srv FileUploaderServer) {
	s.RegisterService(&_FileUploader_serviceDesc, srv)
}

func _FileUploader_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileUploaderServer).Upload(&fileUploaderUploadServer{stream})
}

type FileUploader_UploadServer interface {
	SendAndClose(*FileUploaderResponse) error
	Recv() (*Chunk, error)
	grpc.ServerStream
}

type fileUploaderUploadServer struct {
	grpc.ServerStream
}

func (x *fileUploaderUploadServer) SendAndClose(m *FileUploaderResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileUploaderUploadServer) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _FileUploader_serviceDesc = grpc.ServiceDesc{
	ServiceName: "file_uploader.FileUploader",
	HandlerType: (*FileUploaderServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Upload",
			Handler:       _FileUploader_Upload_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "services/file_uploader/file_uploader.proto",
}
