// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package cutomerpb

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// CustomerClient is the client API for Customer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CustomerClient interface {
	Create(ctx context.Context, in *CustomerCreateRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Get(ctx context.Context, in *CustomerGetRequest, opts ...grpc.CallOption) (*CustomerResponse, error)
}

type customerClient struct {
	cc grpc.ClientConnInterface
}

func NewCustomerClient(cc grpc.ClientConnInterface) CustomerClient {
	return &customerClient{cc}
}

var customerCreateStreamDesc = &grpc.StreamDesc{
	StreamName: "Create",
}

func (c *customerClient) Create(ctx context.Context, in *CustomerCreateRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/customer.Customer/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var customerGetStreamDesc = &grpc.StreamDesc{
	StreamName: "Get",
}

func (c *customerClient) Get(ctx context.Context, in *CustomerGetRequest, opts ...grpc.CallOption) (*CustomerResponse, error) {
	out := new(CustomerResponse)
	err := c.cc.Invoke(ctx, "/customer.Customer/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomerService is the service API for Customer service.
// Fields should be assigned to their respective handler implementations only before
// RegisterCustomerService is called.  Any unassigned fields will result in the
// handler for that method returning an Unimplemented error.
type CustomerService struct {
	Create func(context.Context, *CustomerCreateRequest) (*empty.Empty, error)
	Get    func(context.Context, *CustomerGetRequest) (*CustomerResponse, error)
}

func (s *CustomerService) create(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/customer.Customer/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Create(ctx, req.(*CustomerCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *CustomerService) get(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/customer.Customer/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Get(ctx, req.(*CustomerGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RegisterCustomerService registers a service implementation with a gRPC server.
func RegisterCustomerService(s grpc.ServiceRegistrar, srv *CustomerService) {
	srvCopy := *srv
	if srvCopy.Create == nil {
		srvCopy.Create = func(context.Context, *CustomerCreateRequest) (*empty.Empty, error) {
			return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
		}
	}
	if srvCopy.Get == nil {
		srvCopy.Get = func(context.Context, *CustomerGetRequest) (*CustomerResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
		}
	}
	sd := grpc.ServiceDesc{
		ServiceName: "customer.Customer",
		Methods: []grpc.MethodDesc{
			{
				MethodName: "Create",
				Handler:    srvCopy.create,
			},
			{
				MethodName: "Get",
				Handler:    srvCopy.get,
			},
		},
		Streams:  []grpc.StreamDesc{},
		Metadata: "services/customer/customer.proto",
	}

	s.RegisterService(&sd, nil)
}

// NewCustomerService creates a new CustomerService containing the
// implemented methods of the Customer service in s.  Any unimplemented
// methods will result in the gRPC server returning an UNIMPLEMENTED status to the client.
// This includes situations where the method handler is misspelled or has the wrong
// signature.  For this reason, this function should be used with great care and
// is not recommended to be used by most users.
func NewCustomerService(s interface{}) *CustomerService {
	ns := &CustomerService{}
	if h, ok := s.(interface {
		Create(context.Context, *CustomerCreateRequest) (*empty.Empty, error)
	}); ok {
		ns.Create = h.Create
	}
	if h, ok := s.(interface {
		Get(context.Context, *CustomerGetRequest) (*CustomerResponse, error)
	}); ok {
		ns.Get = h.Get
	}
	return ns
}

// UnstableCustomerService is the service API for Customer service.
// New methods may be added to this interface if they are added to the service
// definition, which is not a backward-compatible change.  For this reason,
// use of this type is not recommended.
type UnstableCustomerService interface {
	Create(context.Context, *CustomerCreateRequest) (*empty.Empty, error)
	Get(context.Context, *CustomerGetRequest) (*CustomerResponse, error)
}
